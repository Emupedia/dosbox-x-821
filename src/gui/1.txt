24d23
< #define _WIN32_WINNT 0x0501
80d77
< # include <imm.h>
100,101d96
< using namespace std;
< 
218a214
> 	SCREEN_SURFACE_DDRAW,
247d242
< const char*					titlebar = NULL;
467,470d462
<     Section_prop *section = static_cast<Section_prop *>(control->GetSection("SDL"));
<     assert(section != NULL);
<     titlebar = section->Get_string("titlebar");
< 
475c467,468
<     sprintf(title,"%s%sDOSBox-X %s, %d cyc/ms",
---
> 	if (!menu_startup) {
> 		sprintf(title,"%s%sDOSBox-X %s, %d cyc/ms, %s",
477,487c470
<         VERSION,(int)internal_cycles);
< 
<     {
<         const char *what = (titlebar != NULL && *titlebar != 0) ? titlebar : RunningProgram;
< 
<         if (what != NULL && *what != 0) {
<             char *p = title + strlen(title); // append to end of string
< 
<             sprintf(p,", %s",what);
<         }
<     }
---
> 			VERSION,(int)internal_cycles,RunningProgram);
500a484,514
> #if defined(C_SDL2)
>         SDL_SetWindowTitle(sdl.window,title);
> #else
> 		SDL_WM_SetCaption(title,VERSION);
> #endif
> 		return;
> 	}
> 
> 	if (menu.hidecycles) {
> 		if (CPU_CycleAutoAdjust) {
> 			sprintf(title,"%s%sDOSBox-X %s, max %3d%% cyc/ms, %s",
> 				dosbox_title.c_str(),dosbox_title.empty()?"":": ",
> 				VERSION,(int)CPU_CyclePercUsed,RunningProgram);
> 		}
> 		else {
> 			sprintf(title,"%s%sDOSBox-X %s, %d cyc/ms, %s",
> 				dosbox_title.c_str(),dosbox_title.empty()?"":": ",
> 				VERSION,(int)internal_cycles,RunningProgram);
> 		}
> 	} else if (CPU_CycleAutoAdjust) {
> 		sprintf(title,"%s%sDOSBox-X %s, CPU : %s %d%% = max %3d, %d FPS - %2d %8s %i.%i%%",
> 			dosbox_title.c_str(),dosbox_title.empty()?"":": ",
> 			VERSION,core_mode,(int)CPU_CyclePercUsed,(int)internal_cycles,(int)frames,
> 			(int)internal_frameskip,RunningProgram,(int)(internal_timing/100),(int)(internal_timing%100/10));
> 	} else {
> 		sprintf(title,"%s%sDOSBox-X %s, CPU : %s %d = %8d, %d FPS - %2d %8s %i.%i%%",
> 			dosbox_title.c_str(),dosbox_title.empty()?"":": ",
> 			VERSION,core_mode,(int)0,(int)internal_cycles,(int)frames,(int)internal_frameskip,
> 			RunningProgram,(int)(internal_timing/100),(int)((internal_timing%100)/10));
> 	}
> 
667a682,698
> static void SDLScreen_Reset(void) {
> 	char* sdl_videodrv = getenv("SDL_VIDEODRIVER");
> 	if ((sdl_videodrv && !strcmp(sdl_videodrv,"windib")) || sdl.desktop.fullscreen || fullscreen_switch || sdl.desktop.want_type==SCREEN_OPENGLHQ || menu_compatible) return;
> 
> #if !defined(C_SDL2)
> 	int id, major, minor;
> 	DOSBox_CheckOS(id, major, minor);
> 	if(((id==VER_PLATFORM_WIN32_NT) && (major<6)) || sdl.desktop.want_type==SCREEN_DIRECT3D) return;
> 
> 	minor = minor;//shut up unused var warnings
> #endif
> 	SDL_QuitSubSystem(SDL_INIT_VIDEO);	SDL_Delay(500);
> 	SDL_InitSubSystem(SDL_INIT_VIDEO);
> 	GFX_SetIcon();
> 	GFX_SetTitle(-1,-1,-1,false);
> }
> 
826a858,867
> #if (HAVE_DDRAW_H) && defined(WIN32)
> 	case SCREEN_SURFACE_DDRAW:
> 		if (!(flags&(GFX_CAN_15|GFX_CAN_16|GFX_CAN_32))) goto check_surface;
> 		if (flags & GFX_LOVE_15) testbpp=15;
> 		else if (flags & GFX_LOVE_16) testbpp=16;
> 		else if (flags & GFX_LOVE_32) testbpp=32;
> 		else testbpp=0;
> 		flags|=GFX_SCALING;
> 		goto check_gotbpp;
> #endif
939c980
< static SDL_Surface * GFX_SetupSurfaceScaledOpenGL(Bit32u sdl_flags, Bit32u bpp) {
---
> static SDL_Surface * GFX_SetupSurfaceScaled(Bit32u sdl_flags, Bit32u bpp) {
942,949d982
< 
<     int Voodoo_OGL_GetWidth();
<     int Voodoo_OGL_GetHeight();
<     bool Voodoo_OGL_Active();
< 
<     if (sdl.desktop.prevent_fullscreen) /* 3Dfx openGL do not allow resize */
<         sdl_flags &= ~SDL_RESIZABLE;
< 
962,981c995
<     if (fixedWidth == 0 || fixedHeight == 0) {
<         Bitu consider_height = menu.maxwindow ? currentWindowHeight : 0;
<         Bitu consider_width = menu.maxwindow ? currentWindowWidth : 0;
<         int final_height = max(consider_height,userResizeWindowHeight);
<         int final_width = max(consider_width,userResizeWindowWidth);
< 
<         fixedWidth = final_width;
<         fixedHeight = final_height;
<     }
<     if (Voodoo_OGL_GetWidth() != 0 && Voodoo_OGL_GetHeight() != 0 &&
<         Voodoo_OGL_Active() && sdl.desktop.prevent_fullscreen) { /* 3Dfx openGL do not allow resize */
<         sdl.clip.x=0;sdl.clip.y=0;
<         sdl.clip.w=(Bit16u)Voodoo_OGL_GetWidth();
<         sdl.clip.h=(Bit16u)Voodoo_OGL_GetHeight();
<         sdl.surface=SDL_SetVideoMode(sdl.clip.w,sdl.clip.h,bpp,sdl_flags);
<         sdl.deferred_resize = false;
<         sdl.must_redraw_all = true;
<     }
<     else if (fixedWidth && fixedHeight) {
<         if (render.aspect) {
---
> 	if (fixedWidth && fixedHeight) {
984,987c998,1000
< 
<             if (ratio_w < ratio_h) {
<                 sdl.clip.w=(Bit16u)fixedWidth;
<                 sdl.clip.h=(Bit16u)floor((sdl.draw.height*sdl.draw.scaley*ratio_w)+0.5);
---
> 		if ( ratio_w < ratio_h) {
> 			sdl.clip.w=fixedWidth;
> 			sdl.clip.h=(Bit16u)(sdl.draw.height*sdl.draw.scaley*ratio_w);
989c1002
<                 sdl.clip.w=(Bit16u)floor((sdl.draw.width*sdl.draw.scalex*ratio_h)+0.5);
---
> 			sdl.clip.w=(Bit16u)(sdl.draw.width*sdl.draw.scalex*ratio_h);
992,997c1005
<         }
<         else {
<             sdl.clip.w=fixedWidth;
<             sdl.clip.h=fixedHeight;
<         }
< 
---
> 		if (sdl.desktop.fullscreen)
999,1000c1007,1015
< 		sdl.clip.x = (fixedWidth - sdl.clip.w) / 2;
<         sdl.clip.y = (fixedHeight - sdl.clip.h) / 2;
---
> 		else
> 			sdl.surface = SDL_SetVideoMode(sdl.clip.w,sdl.clip.h,bpp,sdl_flags);
> 		if (sdl.surface && sdl.surface->flags & SDL_FULLSCREEN) {
> 			sdl.clip.x=(Sint16)((sdl.surface->w-sdl.clip.w)/2);
> 			sdl.clip.y=(Sint16)((sdl.surface->h-sdl.clip.h)/2);
> 		} else {
> 			sdl.clip.x = 0;
> 			sdl.clip.y = 0;
> 		}
1003,1004c1018
<     }
<     else {
---
> 	} else {
1030c1044,1054
< 	/* deprecated */
---
> #if defined(WIN32) && !defined(C_SDL2)
> 	if(!load_videodrv && !sdl.using_windib) {
> 		LOG_MSG("Resetting to WINDIB mode");
> 		SDL_QuitSubSystem(SDL_INIT_VIDEO);
> 		putenv("SDL_VIDEODRIVER=windib");
> 		sdl.using_windib=true;
> 		if (SDL_InitSubSystem(SDL_INIT_VIDEO)<0) E_Exit("Can't init SDL Video %s",SDL_GetError());
> 		GFX_SetIcon(); GFX_SetTitle(-1,-1,-1,false);
> 		if(!sdl.desktop.fullscreen && GetMenu(GetHWND()) == NULL) DOSBox_RefreshMenu();
> 	}
> #endif
1207a1232
> 		SDLScreen_Reset();
1325a1351,1404
> #if defined(HAVE_DDRAW_H) && defined(WIN32)
> 	case SCREEN_SURFACE_DDRAW:
>     {
> 		if(!load_videodrv && sdl.using_windib) {
> 			LOG_MSG("Resetting to DirectX mode");
> 			SDL_QuitSubSystem(SDL_INIT_VIDEO);
> 			putenv("SDL_VIDEODRIVER=directx");
> 			sdl.using_windib=false;
> 			if (SDL_InitSubSystem(SDL_INIT_VIDEO)<0) E_Exit("Can't init SDL Video %s",SDL_GetError());
> 			GFX_SetIcon(); GFX_SetTitle(-1,-1,-1,false);
> 			if(!sdl.desktop.fullscreen && GetMenu(GetHWND()) == NULL) DOSBox_RefreshMenu();
> 		}
> 
> 		if (flags & GFX_CAN_15) bpp=15;
> 		if (flags & GFX_CAN_16) bpp=16;
> 		if (flags & GFX_CAN_32) bpp=32;
> 		SDLScreen_Reset();
> 		if (!GFX_SetupSurfaceScaled((sdl.desktop.doublebuf && sdl.desktop.fullscreen) ? SDL_DOUBLEBUF : SDL_RESIZABLE,bpp)) goto dosurface;
> 
> 		
> 		sdl.blit.rect.top=sdl.clip.y+sdl.overscan_width;
> 		sdl.blit.rect.left=sdl.clip.x+sdl.overscan_width;
> 		sdl.blit.rect.right=sdl.clip.x+sdl.clip.w;
> 		sdl.blit.rect.bottom=sdl.clip.y+sdl.clip.h;
> 		sdl.blit.surface=SDL_CreateRGBSurface(SDL_HWSURFACE,sdl.draw.width+sdl.overscan_width*2,sdl.draw.height+sdl.overscan_width*2,
> 				sdl.surface->format->BitsPerPixel,
> 				sdl.surface->format->Rmask,
> 				sdl.surface->format->Gmask,
> 				sdl.surface->format->Bmask,
> 				0);
> 		if (!sdl.blit.surface || (!sdl.blit.surface->flags&SDL_HWSURFACE)) {
> 			if (sdl.blit.surface) {
> 				SDL_FreeSurface(sdl.blit.surface);
> 				sdl.blit.surface=0;
> 			}
> 			sdl.desktop.want_type=SCREEN_SURFACE;
> 			LOG_MSG("Failed to create ddraw surface, back to normal surface.");
> 			goto dosurface;
> 		}
> 		switch (sdl.surface->format->BitsPerPixel) {
> 		case 15:
> 			retFlags = GFX_CAN_15 | GFX_SCALING | GFX_HARDWARE;
> 			break;
> 		case 16:
> 			retFlags = GFX_CAN_16 | GFX_SCALING | GFX_HARDWARE;
>                break;
> 		case 32:
> 			retFlags = GFX_CAN_32 | GFX_SCALING | GFX_HARDWARE;
>                break;
> 		}
> 		sdl.desktop.type=SCREEN_SURFACE_DDRAW;
> 		break;
>     }
> #endif
1328a1408
> 		GFX_ResetSDL();
1335,1337c1415
< 
<         glFinish();
<         glFlush();
---
> 		SDLScreen_Reset();
1348c1426
< 		GFX_SetupSurfaceScaledOpenGL(SDL_RESIZABLE, 0);
---
> 		GFX_SetupSurfaceScaled(SDL_RESIZABLE, 0);
1354,1356d1431
<         glFinish();
<         glFlush();
< 
1375a1451,1453
> 		//correction for viewport if 640x400
> 		if(sdl.clip.h < 480 && sdl.desktop.fullscreen) sdl.clip.y=(480-sdl.clip.h)/2;
> 
1378d1455
< 		glLoadIdentity ();
1382,1383d1458
< 		glTexEnvi (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);
< 		glTexEnvi (GL_TEXTURE_ENV, GL_TEXTURE_ENV_COLOR, GL_REPLACE);
1397d1471
<         gl_clear_countdown = 2; // two GL buffers
1400,1401c1474,1475
< //		SDL_GL_SwapBuffers();
< //		glClear(GL_COLOR_BUFFER_BIT);
---
> 		SDL_GL_SwapBuffers();
> 		glClear(GL_COLOR_BUFFER_BIT);
1403d1476
<         glBlendFunc(GL_ONE, GL_ZERO);
1406d1478
<         glDisable(GL_BLEND);
1408,1411d1479
<         glDisable(GL_ALPHA_TEST);
<         glDisable(GL_FOG);
<         glDisable(GL_SCISSOR_TEST);
<         glDisable(GL_STENCIL_TEST);
1436,1438d1503
<         glFinish();
<         glFlush();
< 
1575c1640
< 		if(GCC_UNLIKELY(d3d->Resize3DEnvironment(window_width,window_height,sdl.clip.w,sdl.clip.h,width,
---
> 		if(GCC_UNLIKELY(d3d->Resize3DEnvironment(sdl.clip.w,sdl.clip.h,width,
1594,1596d1658
< 
< 	UpdateWindowDimensions();
< 
1942a2005,2006
> 	void change_output(int output);
> 	change_output(2);
2009c2073
< 	auto hDesk = GetDesktopWindow();
---
> 	HWND hDesk = GetDesktopWindow();
2069,2072c2133,2137
< 	auto sdlSection = control->GetSection("sdl");
< 	auto sdlSectionProp = static_cast<Section_prop*>(sdlSection);
< 	auto fullRes = sdlSectionProp->Get_string("fullresolution");
< 	if (!strcmp(fullRes, "desktop")) GetDesktopResolution(&width, &height);
---
> 	Section * sdlSection = control->GetSection("sdl");
> 	 Section_prop* sdlSectionProp = static_cast<Section_prop*>(sdlSection);
> 	 
> 	std::string fullRes = sdlSectionProp->Get_string("fullresolution");
> 	if (!strcmp(fullRes.c_str(), "desktop")) GetDesktopResolution(&width, &height);
2115a2181,2184
> #if defined(WIN32) && !defined(C_SDL2)
> 		sdl.surface=SDL_SetVideoMode(640,400,0,SDL_HWSURFACE|SDL_HWPALETTE);
> 		sdl.desktop.want_type=SCREEN_SURFACE_DDRAW;
> #else
2116a2186
> #endif
2220c2292
< 	auto full = sdl.desktop.fullscreen;
---
> 	int full = sdl.desktop.fullscreen;
2229,2230c2301,2302
< 		auto width1 = sdl.draw.width;
< 		auto height1 = sdl.draw.height;
---
> 		unsigned int width1 = sdl.draw.width;
> 		unsigned int height1 = sdl.draw.height;
2253c2325
< 	auto locked = sdl.mouse.locked;
---
> 	int locked = sdl.mouse.locked;
2268c2340
< 		auto vsync = static_cast<Section_prop *>(control->GetSection("vsync"));
---
> 		Section_prop * vsync = static_cast<Section_prop *>(control->GetSection("vsync"));
2271,2272c2343,2344
< 			auto vsyncMode = vsync->Get_string("vsyncmode");
< 			if (!strcmp(vsyncMode, "host")) SetVal("vsync", "vsyncmode", "host");
---
> 			std::string vsyncMode = vsync->Get_string("vsyncmode");
> 			if (!strcmp(vsyncMode.c_str(), "host")) SetVal("vsync", "vsyncmode", "host");
2354a2427,2438
> #if (HAVE_DDRAW_H) && defined(WIN32)
> 	case SCREEN_SURFACE_DDRAW:
> 		if (SDL_LockSurface(sdl.blit.surface)) {
> //			LOG_MSG("SDL Lock failed");
> 			return false;
> 		}
> 		pixels=(Bit8u *)sdl.blit.surface->pixels;
> 		pitch=sdl.blit.surface->pitch;
>         SDL_Overscan();
> 		sdl.updating=true;
> 		return true;
> #endif
2411,2414d2493
<             } else if (sdl.must_redraw_all) {
< #if !defined(C_SDL2)
<                 if (changedLines != NULL) SDL_Flip(sdl.surface);
< #endif
2433c2512
<                 if (rectCount) {
---
> 			if (rectCount)
2439a2519,2538
> 		break;
> #if (HAVE_DDRAW_H) && defined(WIN32)
> 	case SCREEN_SURFACE_DDRAW:
> 		SDL_UnlockSurface(sdl.blit.surface);
> 	if(changedLines && (changedLines[0] == sdl.draw.height)) 
> 	return; 
> 	if(!menu.hidecycles && !sdl.desktop.fullscreen) frames++;
> 		ret=IDirectDrawSurface3_Blt(
> 			sdl.surface->hwdata->dd_writebuf,&sdl.blit.rect,
> 			sdl.blit.surface->hwdata->dd_surface,0,
> 			DDBLT_WAIT, NULL);
> 		switch (ret) {
> 		case DD_OK:
> 			break;
> 		case DDERR_SURFACELOST:
> 			IDirectDrawSurface3_Restore(sdl.blit.surface->hwdata->dd_surface);
> 			IDirectDrawSurface3_Restore(sdl.surface->hwdata->dd_surface);
> 			break;
> 		default:
> 			LOG_MSG("DDRAW:Failed to blit, error %X",ret);
2440a2540
> 		SDL_Flip(sdl.surface);
2441a2542
> #endif
2444,2452d2544
<             if (sdl.must_redraw_all && changedLines == NULL) {
<             }
<             else {
<                 if (gl_clear_countdown > 0) {
<                     gl_clear_countdown--;
<                     glClearColor (0.0, 0.0, 0.0, 1.0);
<                     glClear(GL_COLOR_BUFFER_BIT);
<                 }
< 
2477c2569
< #if defined (MACOSX)
---
> 						#if defined (MACOSX)
2480c2572
< #else
---
> 						#else
2483c2575
< #endif
---
> 						#endif
2490d2581
<                     SDL_GL_SwapBuffers();
2494c2584
<             }
---
> 		SDL_GL_SwapBuffers();
2508,2519d2597
< 
<     sdl.must_redraw_all = false;
< 
<     if (changedLines != NULL && sdl.deferred_resize) {
<         sdl.deferred_resize = false;
< #if defined(C_SDL2)
< #else
<         void GFX_RedrawScreen(Bit32u nWidth, Bit32u nHeight);
< 
<         GFX_RedrawScreen(sdl.draw.width, sdl.draw.height);
< #endif
<     }
2539a2618
> 	case SCREEN_SURFACE_DDRAW:
2798a2878
> #if (HAVE_DDRAW_H) && defined(WIN32)
2800c2880,2881
< 		sdl.desktop.want_type=SCREEN_SURFACE;
---
> 		sdl.desktop.want_type=SCREEN_SURFACE_DDRAW;
> #endif
2918d2998
< 	MAPPER_AddHandler(&GUI_ResetResize, MK_f2, MMOD1, "resetsize", "ResetSize");
3195c3275
< 	DoExtendedKeyboardHook(false);
---
> 	//DoExtendedKeyboardHook(false);
3391c3471
< 			char root[4] = {'A'+ZDRIVE_NUM,':','\\',0};
---
> 			char root[4] = {static_cast<char>('A'+ZDRIVE_NUM),':','\\',0};
3434c3514
< 	char root[4] = {'A'+ZDRIVE_NUM,':','\\',0};
---
> 	char root[4] = {static_cast<char>('A'+ZDRIVE_NUM),':','\\',0};
3449d3528
< /* FIXME: Unused */
3803c3882
<                 SetPriority(sdl.priority.focus);
---
>       //          SetPriority(sdl.priority.focus);
3810c3890
<                 SetPriority(sdl.priority.nofocus);
---
>         //        SetPriority(sdl.priority.nofocus);
3933a4014
> 			if(menu_compatible) break;
3935,3937d4015
< 				case WM_COMMAND:
< 					MSG_WM_COMMAND_handle(/*&*/(*event.syswm.msg));
< 					break;
3940d4017
< 						case 0xF032: // FIXME: What is this?
3942,3944c4019,4023
<                             userResizeWindowWidth = 0;
<                             userResizeWindowHeight = 0;
<                             menu.maxwindow = true;
---
> 						case 0xF032:
> //							if(sdl.desktop.want_type==SCREEN_DIRECT3D)
> //								menu.maxwindow=true;
> //							else
> 								GFX_SwitchFullScreen();
3946c4025
< 						case 0xF122: // FIXME: What is this?
---
> 						case 0xF122:
3948,3956c4027
< 							if (sdl.desktop.fullscreen)
< 								GFX_SwitchFullScreen();
< 							menu.maxwindow = false;
< 							UpdateWindowDimensions();
< 							RENDER_Reset();
< 							if (OpenGL_using()) {
< 								UpdateWindowDimensions();
< 								RENDER_Reset();
< 							}
---
> 							menu.maxwindow=false;
3958,3961c4029,4033
< 						case ID_WIN_SYSMENU_RESTOREMENU:
<                             /* prevent removing the menu in 3Dfx mode */
<                             if (!GFX_GetPreventFullscreen())
<                                 DOSBox_SetMenu();
---
> 					}
> 				case WM_DROPFILES: {
> 					char buff[50];
> 					DragQueryFile((HDROP)event.syswm.msg->wParam,0,buff,200);
> 					Drag_Drop(buff);
3974c4046
< 					SetPriority(sdl.priority.focus);
---
> 				//	SetPriority(sdl.priority.focus);
3977,3980c4049,4052
< 					if (sdl.mouse.locked) GFX_CaptureMouse();
< 
< #if defined(WIN32)
< 					if (sdl.desktop.fullscreen)
---
> 					if (sdl.mouse.locked) {
> #ifdef WIN32
> 						if (sdl.desktop.fullscreen) {
> 							VGA_KillDrawing();
3981a4054
> 						}
3983,3984c4056,4058
< 
< 					SetPriority(sdl.priority.nofocus);
---
> 						GFX_CaptureMouse();
> 					}
> 				//	SetPriority(sdl.priority.nofocus);
4045d4118
< 			UpdateWindowDimensions(); // FIXME: Use SDL window dimensions, except that on Windows, SDL won't tell us our actual dimensions
4401a4475
> #if (HAVE_DDRAW_H) && defined(WIN32)
4402a4477
> #endif
4458,4463d4532
< 	Pstring = sdl_sec->Add_string("titlebar", Property::Changeable::Always, "");
< 	Pstring->Set_help("Change the string displayed in the DOSBox title bar.");
< 
< 	Pbool = sdl_sec->Add_bool("showmenu", Property::Changeable::Always, true);
< 	Pbool->Set_help("Whether to show the menu bar (if supported). Default true.");
< 
4484,4485d4552
<     sdl.deferred_resize = false;
<     sdl.must_redraw_all = true;
4860,4861d4926
<             fprintf(stderr,"  -time-limit <n>                         Kill the emulator after 'n' seconds\n");
<             fprintf(stderr,"  -log-con                                Log CON output to a log file\n");
4873,4879d4937
<         else if (optname == "log-con") {
<             control->opt_log_con = true;
<         }
<         else if (optname == "time-limit") {
<             if (!control->cmdline->NextOptArgv(tmp)) return false;
<             control->opt_time_limit = atof(tmp.c_str());
<         }
5038c5096
< void ISAPNP_Cfg_Init();
---
> //void ISAPNP_Cfg_Init();
5207,5208d5264
<     memset(&sdl,0,sizeof(sdl)); // struct sdl isn't initialized anywhere that I can tell
< 
5221,5223d5276
<         if (control->opt_time_limit > 0)
<             time_limit_ms = (Bitu)(control->opt_time_limit * 1000);
< 
5366,5367d5418
<         sdl.init_ignore = true;
< 
5390,5395d5440
< 		{
< 			Section_prop *section = static_cast<Section_prop *>(control->GetSection("SDL"));
< 			assert(section != NULL);
< 
< 			bool cfg_want_menu = section->Get_bool("showmenu");
< 
5397c5442
< 			if (menu_gui && !control->opt_nomenu && cfg_want_menu)
---
> 		if (menu_gui && !control->opt_nomenu)
5399,5401d5443
< 			else
< 				DOSBox_NoMenu();
< 		}
5421,5424d5462
<         /* must redraw after modeset */
<         sdl.must_redraw_all = true;
<         sdl.deferred_resize = false;
< 
5436a5475,5486
> 			char sdl_drv_name[128];
> 
> 			LOG(LOG_MISC,LOG_DEBUG)("Win32: SDL_VIDEODRIVER is not defined, attempting to detect and use directx SDL driver");
> 			if (SDL_VideoDriverName(sdl_drv_name,128)!=NULL) {
> 				sdl.using_windib=false;
> 				LOG(LOG_MISC,LOG_DEBUG)("Win32: SDL driver name is '%s'",sdl_drv_name);
> 				if (strcmp(sdl_drv_name,"directx")!=0) {
> 					LOG(LOG_MISC,LOG_DEBUG)("Win32: Reinitializing SDL to use directx");
> 					SDL_QuitSubSystem(SDL_INIT_VIDEO);
> 					putenv("SDL_VIDEODRIVER=directx");
> 					if (SDL_InitSubSystem(SDL_INIT_VIDEO)<0) {
> 						LOG(LOG_MISC,LOG_DEBUG)("Win32: Failed to reinitialize to use directx. Falling back to windib");
5439a5490,5492
> 					}
> 				}
> 			}
5525a5579,5622
> 		if (sdl.desktop.want_type == SCREEN_OPENGL && sdl.using_windib) {
> 			LOG(LOG_MISC,LOG_DEBUG)("Desktop wants SCREEN_OPENGL and we're using windib now. Reinitializing SDL video output.");
> 			SDL_QuitSubSystem(SDL_INIT_VIDEO);
> 			sdl.surface = NULL; // surface becomes invalid!
> 			if (SDL_InitSubSystem(SDL_INIT_VIDEO) < 0)
> 				E_Exit("Can't init SDL Video %s",SDL_GetError());
> 
> 			sdl.surface = SDL_SetVideoMode(640, 400, 0, SDL_RESIZABLE);
> 			if (sdl.surface == NULL) E_Exit("Could not initialize video: %s", SDL_GetError());
> 
> 			change_output(4);
> 			GFX_SetIcon();
> 			SDL_Prepare();
> 			if (menu.gui && !control->opt_nomenu) {
> 				SetMenu(GetHWND(), LoadMenu(GetModuleHandle(NULL),MAKEINTRESOURCE(IDR_MENU)));
> 				DrawMenuBar(GetHWND());
> 			}
> 		}
> #endif
> 
> #if defined(WIN32) && !defined(C_SDL2)
> 		{
> 			Section_prop *sec = static_cast<Section_prop *>(control->GetSection("sdl"));
> 			if (!strcmp(sec->Get_string("output"),"ddraw") && sdl.using_windib) {
> 				LOG(LOG_MISC,LOG_DEBUG)("Output is 'ddraw' and we're using windib. Reinitializing SDL video output.");
> 
> 				SDL_QuitSubSystem(SDL_INIT_VIDEO);
> 				putenv("SDL_VIDEODRIVER=directx");
> 				sdl.using_windib=false;
> 				if (SDL_InitSubSystem(SDL_INIT_VIDEO)<0)
> 					E_Exit("Can't init SDL Video %s",SDL_GetError());
> 
> 				change_output(1);
> 				GFX_SetIcon();
> 				SDL_Prepare();
> 				if (menu.gui && !control->opt_nomenu) {
> 					SetMenu(GetHWND(), LoadMenu(GetModuleHandle(NULL),MAKEINTRESOURCE(IDR_MENU)));
> 					DrawMenuBar(GetHWND());
> 				}
> 			}
> 
> 			if (!load_videodrv && numlock_stat)
> 				SetNumLock ();
> 		}
5569c5666
< 		ISAPNP_Cfg_Init();
---
> //		ISAPNP_Cfg_Init();
5834c5928
< 	CPU_Core_Dyn_X86_Shutdown();
---
> 	//CPU_Core_Dyn_X86_Shutdown();
